---
interface Props {
  data: string
}

interface LyricLine {
  text: string
  isHighlight: boolean
  toneText?: string
  toneText2?: string
}

const { data } = Astro.props

const lyricLines = data.split('\n').map(line => {
  // [time](highlight)text [toneText(|toneText2)]
  // [00:11]!我的心内感觉 [Gua e sim-lai kam-kak|wa e xin nai gan ga]
  const timeLineRegex = /^\[\d{2}:\d{2}(\.\d+)?\]/
  const toneTextRegex = /\[([^\]]+)\]$/
  const rawText = line.replace(timeLineRegex, '').trim()
  const isHighlight = rawText.startsWith('!')
  const toneTextRaw = rawText.match(toneTextRegex)?.[1]
  const hasToneText2 = toneTextRaw?.includes('|')
  const toneText = hasToneText2 ? toneTextRaw?.split('|')[0] : toneTextRaw
  const toneText2 = hasToneText2 ? toneTextRaw?.split('|')[1] : undefined
  const text = toneText ? rawText.replace(toneTextRegex, '') : rawText
  return { 
    text: text.replace(/^\!/, '').replaceAll('  ', '\u00a0\u00a0').trim(),
    isHighlight,
    toneText: toneText?.replaceAll('  ', '\u00a0\u00a0') || undefined,
    toneText2: toneText2?.replaceAll('  ', '\u00a0\u00a0') || undefined,
  } as LyricLine
})

if (lyricLines[0].text === '') {
  lyricLines.shift()
}
---

<div class="leading-snug">
  {lyricLines.map(line => (
    <div class="py-[0.3em]">
      { line.toneText && (
        <p class:list={[
          'lyric-tone mb-[0.2em] leading-tight font-serif op-70 hidden break-words',
          line.isHighlight ? 'fg-primary' : '',
        ]}>
          {line.toneText}
        </p>
      )}
      { line.toneText2 && (
        <p class:list={[
          'lyric-tone2 mb-[0.2em] leading-tight font-serif op-70 hidden break-words',
          line.isHighlight ? 'fg-primary' : '',
        ]}>
          {line.toneText2}
        </p>
      )}
      <p class={line.isHighlight ? 'fg-primary' : ''}>
        {line.text || '\u00a0'}
      </p>
    </div>
  ))}
</div>